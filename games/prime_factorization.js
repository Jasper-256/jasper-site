document.addEventListener("DOMContentLoaded", function() {
    const urlParams = new URLSearchParams(window.location.search);
    let challengeNum = parseInt(urlParams.get("pfc")) || 1;
    if(challengeNum < 1) { challengeNum = 1; }
    loadChallenge(challengeNum);

    document.getElementById("form").addEventListener("submit", function(e) {
        e.preventDefault();
        clearTimeout(this.timeout);
        const userFactors = Array.from(document.querySelectorAll("input[name^='num_']")).map(input => {
            try {
                return BigInt(input.value);
            } catch (error) {
                return 0n;
            }
        });
        const infoTag = document.getElementById("info");
        const checkButton = document.getElementById("check");

        if(isCorrect(challengeNum, userFactors)) {
            infoTag.textContent = "You've entered the correct prime factors!";
            checkButton.textContent = "Next Challenge";
            checkButton.addEventListener("click", function() {
                window.location.href = "prime_factorization.html?pfc=" + (challengeNum + 1);
            });
        } else {
            infoTag.textContent = "Incorrect";
            this.timeout = setTimeout(function() {
                infoTag.textContent = "";
            }, 2000);
        }
    });
});

function getChallengeFactor(challengeNum) {
    // PFC              1   2    3     4       5            6                      7                                         8                                                                               9                                                                                                                                                             10                                                                                                                                                                                                                                                                                                                      11                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          12                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  13
    const challenges = [6n, 15n, 209n, 47077n, 3832343173n, 17552345699985880033n, 256232121352508651574907120496388278077n, 72766680183024192465551369814503150458222546558848234704938355713516940651863n, 13262731672193470448780743325116019772665759576677515727776495411548264009269567519093017716292704006107273878603003884176732333443602033741369100389077969n, 177748032774801049585813473454166233071051448786439105050809775265897180903587657707756703802010134801630073272729474294819018958041341379185938040845501926277999444830108102681113086699429661248929923879796503681050387479856199883807402036809137931961857422522125145687912211390489700910809760655629875782613n, 27853985130884527188920007395369709212478543588035211721678129624710133748948565518242787734712291021992799539665918162230124316324532592961713819424804649218466443663210106084999495516077500459507001849813413017172383731332423377786398167703261685374368981471018293239382288997015707946159091908492739948680527341988536690577712163175557776290705087960256489442028809979847877996513811982578654414240491937753428758279340395047603574875554516722951916063357394582762928944721213564704794696101720095911383040385781288161389170711260046079066671934440820456115359922681867617127477000105407555311809721265171218831347n, 840533705296440987493635917854455446483747892955743692215022964768352551588927430108663931578629188208219815320069126400239612533320298343225013721395383873512077223524223660133043288848926029947885351918812610179051078362749737429646299597397035829784761354573972103740035426476791465726119509736363657142859325819104379791694345044520304845487638573913494224217302608980701012204742768605470238039990040595787694019617584395717195448986827519717139469662553026809651309888368881328910064143742927695887747765643980167546437671037760988682899798513663607258792586736898249552348974759373311166075181652965090729273877886339812133971022724324793308760777358650784438587866092180531421050872600803137383909110854312323544791054249551796167043061885453911424309592443309810849399556238024144586764604004559922063814693016627010213671003686148338004833668744055038757269639663032565481461281485700122773244924206514190263371970277856439823721145782325405899025622277134873069494944895246152148277875181385928247420684302017739427955652702528932016942961663304106745793089867104497279801821461547015330289785131197633268813049517834106702313339845358195673109167295865337634601892552033480889718771107243709196331636283829189159436107169n, 664951037631675723157192763896091500283767832216289769009280380439918504843958298240696502875474021180624053336155523693732291315240825540690213563337954794228011137505392694550813396580326928212768290559987503536435621814873170076169483529978275935290648480023441362163226080953151084053241546617687082569947904286062037603901581292230760765527272217650937958673745131923340409995207634482396528980207303482619932234889705832016553123218296491317659922000356343384026942882239991202205553423604188656127626690925307574308635829930796198673290934595238193023610943812768280636978477914718767304998788128632646976098801683293585376137109563726521961249978056674527083540074943483263013178846097179263070436277020412865816583303869887675524313668876342382593888443015515692014523338102735043207489203644266675645919662050600431565094685288834194408112742042981464040197170036706771898330434761379871201218198729894580999758448688482285076272141555012617312511558967973452639583956235207119447474740530654814547487213701664037572828696441858487852374061794610900390374270148589924423987959538211125272582263851908793924472326947345493890551296413920004157139779485749769118752587346958552937330207770749761188847087161314964853176482846979469309963562027942889295664035743402371854857163723233694943530889375885682688344633970132073516289024093208512137785649745274694256317673430971236364996492260908412284770997657810960986735824768516301416583710535416165050899747627079916469668959123841162148074200821083265053613929752069996500582438721823543874177571551848216328092330287271234686664102893250942936502277447116479514890247123854831115801931894478219484763129317014732931018083078501913945163985208089648415855158055426718082370956146405542973890067254573019346439777198585792460814718312200190067650451349685190827283544486698534665957283920526921971114798273615505429574256005257582991223306908554197600822391006036556260406045852762534234316771263648221301304299026789189286533300806317431502889445137201208812351003696335714799564784572281977005954683339558388924176731944730032370860777383568648030824041675709034277196199537942966560634741107102182138195527753508966825672648691153850645222416691375177488591001827889972936898265697398839405620640922113645021980086963621042327800220979387546969699174196810213928374751565357367366009562841111829581362481106181371953610277923263188658373635472976123058520770060005200836870950712448437989983789166374304109n];
    return challenges[challengeNum - 1] || 0n;
}

function isCorrect(challengeNum, userFactors) {
    const factor = getChallengeFactor(challengeNum);
    var product = 1n;
    for(i in userFactors) {
        const userFactor = userFactors[i];
        if(userFactor === factor || userFactor <= 1n) {
            return false;
        } else {
            product *= userFactor;
        }
    }
    return factor === product;
}

function loadChallenge(challengeNum) {
    const zeroPad = (num, places) => String(num).padStart(places, '0')
    document.getElementById("challenge_num").textContent = zeroPad(challengeNum, 2);
    document.title = "PFC-" + zeroPad(challengeNum, 2) + " - Jasper's Site"
    document.getElementById("factor_text").textContent = getChallengeFactor(challengeNum) == 0n ? "Congratulations on completing all of the challenges, unless you skipped ahead" : "Find the prime factors of " + getChallengeFactor(challengeNum);
}
